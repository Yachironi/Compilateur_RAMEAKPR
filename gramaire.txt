Programme : LClassOpt Bloc	{ $$ = makeTree(PROGRAM,2,$1,$2); }
          ;

// =======================

LClassOpt : DeclClass LClassOpt	{$1->suivant=$2; $$=$1;}
            | /* epsilon */ {$$=NIL(Tree);}
            ;
// =======================

Bloc : '{' ContenuBloc '}'	{$$=$2;}
      ;

// ===================

ContenuBloc : LInstructionOpt YieldOpt		{$$=makeTree(CONTENUBLOC,2,$1,$2);}				// pas sur
      | ListDeclVar IS LInstruction YieldOpt	{$$=makeTree(CONTENUBLOC,2,$1,makeTree(ETIQUETTE_IS,2,$3,$4));}	// pas sur
      ;
// ====================

YieldOpt : YIELD expr';'	{$$=makeTree(ETIQUETTE_YIELD, 1, $2);}
        | /* epsilon */		{$$=NIL(Tree);}
        ;

// =====================

ListDeclVar : VAR StaticOpt ID ':' IDCLASS AffectExprOpt ';' LDeclChampsOpt {}	// a faire
            ;

// ==================

LInstructionOpt : Instruction LInstructionOpt	{$$=makeTree(LIST_INSTRUCTION, 2, $1, $2);} // makeTree ou makeList?
                | /* epsilon */ {$$=NIL(Tree);}
                ;

// ====================

LInstruction : Instruction LInstructionOpt	{$$=makeTree(LIST_INSTRUCTION, 2, $1, $2);} // makeTree ou makeList?
              ;

// ======================

Instruction : expr ';'						{$$=$1}
            | Bloc						{$$=$1}
            | Cible AFFECT expr ';'				{$$=makeTree(ETIQUETTE_AFFECT, 2, $1, $3);} 
            | IF expr THEN Instruction ELSE Instruction		{$$=makeTree(IFTHENELSE, 3, $2, $4, $6);}
            | RETURN ';'					{$$=makeLeaf(ETIQUETTE_RETURN, $1);} // on fait quoi?
            ;


//======================

Cible : ID 		{$$=makeLeafStr(IDENTIFICATEUR,$1->S);}
      | IDCLASS		{$$=makeLeafStr(IDENTIFICATEURCLASS,$1->S);}
      | selection	{$$=$1;}
      ;

//===================


BlocOpt : Bloc		{$$=$1;}
        | /* epsilon */ {$$=NIL(Tree);}
        ;
//==================

DeclClass : CLASS IDCLASS '('ListParamOpt')' ListExtendsOpt BlocOpt IS '{'ContenuClassOpt'}' 
		{classActuel=$2; $$=makeClasse($2,$4,$10,$6,$7);} /* A  VOIIIIIIIIIR*/
            ;
//==================
ContenuClassOpt : LDeclChampsOpt LDeclMethodeOpt	{$$=makeTree(CONTENUCLASS,2,$1,$2);}
		;

//==================
LDeclChampsOpt : VAR StaticOpt ID ':' IDCLASS AffectExprOpt ';' LDeclChampsOpt	// appeler makeVar
              |
              ;

//==================
StaticOpt : STATIC	{$$=makeLeafStr(STATIQUE,$1);}//faire quoi?
          | {$$=NIL(Tree);}
          ;
//==================

AffectExprOpt : AFFECT expr; //';'? + faire quoi?{$$=$2;} ou {$$=makeTree(ETIQUETTE_AFFECT, 1, $2)? car on a besoin de savoir que c AFFECT
              |	{$$=NIL(Tree);}
              ;

//==================

Methode: DEF OverrideOuStaticOpt ID '(' ListParamOpt ')' RETURNS IDCLASS BlocOuExpr 
	{$$ = makeMethode($3,$2,$9,$8,$5,classActuel);}
	;

//==================

LDeclMethodeOpt : Methode LDeclMethodeOpt	{ $$ = makeTree(LISTEMETHODE,$1,$2) }
              |  { $$=NIL(Tree);}
              ;

//==================

OverrideOuStaticOpt : OVERRIDE		 { $$=1; }
                      | STATIC		 { $$=2; }
                      | /* expression */ { $$=NIL(Tree);}	// return 0
                      ;

//==================

BlocOuExpr : AffectExprOpt	{ $$=$1;}
           | Bloc		{ $$=$1;}
           ;

//==================

ListParamOpt : LParam 		{ $$=$1; }
              | /* epsilon */ 	{ $$=NIL(Tree);}
              ;

//==================

LParam : Param			{ $$=$1 ;}
        | LParam','Param	{ $$=makeTree(LISTEPARAM, 2,$1,$3);}	// appeler makelist
        ;

//==================


Param : ID':' IDCLASS	{ $$ = makeTree(PARAM, 2, makeLeafStr(IDENTIFICATEURCLASS,$1->S),makeLeafStr(IDENTIFICATEURCLASS,$3->S)); }
          ;


//==================

ListExtendsOpt : EXTENDS IDCLASS'('ListOptArg')'	{ $$=makeTree(EXTENTION, 2, makeLeafStr(IDENTIFICATEURCLASS,$2),$4);} // A verifier $1->S
              | /* epsilon */				{ $$=NIL(Tree);}
              ;

//==================

ListOptArg :		{ $$=NIL(Tree);}
	   | LArg	{ $$=$1	;}
           ;

//==================

LArg : expr		{ $$ = $1}
     | LArg','expr      { $$=makeTree(LISTEARG, 2, $1,$3);}
     ;


//==================

expr : ID 				{ $$=makeLeafStr(IDENTIFICATEUR, $1->S); } // yylval.S ou $1->S
       | PLUS expr %prec unaire		{ $$=$2; }
       | MINUS expr %prec unaire	{ $$=makeTree(MINUSUNAIRE, 1, $2); }
       | expr CONCAT expr		{ $$=makeTree(CONCATENATION, 2, $1, $3); }
       | expr PLUS expr 		{ $$=makeTree(PLUSBINAIRE, 2, $1, $3); }
       | expr MINUS expr 		{ $$=makeTree(MINUSBINAIRE, 2, $1, $3); }
       | expr DIV expr			{ $$=makeTree(DIVISION, 2, $1, $3); }
       | expr MUL expr			{ $$=makeTree(MULTIPLICATION, 2, $1, $3); }
       | expr RELOP expr		{ $$=makeTree(OPCOMPARATEUR, 2, $1, $3); }
       | selection			{ $$=$1; }
       | constante 			{ $$=$1; }
       /*| '(' expr ')'			{ $$=$2; }//{ $$=makeTree(EXPRESSIONPAREN, 3, '(',$2, ')'); }*/
       | instanciation			{ $$=$1; }
       | envoiMessage			{ $$=$1; }
       | RETURN expr ';'		{ $$=makeTree(EXPRESSIONRETURN, 1, $2); }
       | OuRien
       ;

//==================


OuRien : '(' expr ')'
       | Cible
       ;

//==================

selection : IDCLASS'.'ID
          | ID'.'ID
          | envoiMessage'.'ID
          | selection'.'ID
          | '('instanciation')' '.' ID
          | OuRien '.' ID
         ;

//==================

constante : CSTS  { $$ = makeLeafStr(CSTSTRING,yylval.S); } // yylval.S ou $1 ou $1->S
	  | CSTE  { $$ = makeLeafInt(CSTENTIER,yylval.I); }
          ;

//==================

instanciation : NEWO IDCLASS '(' ListOptArg ')' { $$=makeTree(INSTANCIATION, 2, makeLeafStr(IDENTIFICATEURCLASS,$2->S), $4); }
              ;

//==================

envoiMessage : IDCLASS '.' ID '(' ListOptArg ')'		{ $$=makeTree(ENVOIMESSAGE, 3, makeLeafStr(IDENTIFICATEURCLASS,$1->S),makeLeafStr(IDENTIFICATEUR,$3->S),$5); }
              | ID '.' ID '(' ListOptArg ')'   			{ $$=makeTree(ENVOIMESSAGE, 3, makeLeafStr(IDENTIFICATEUR,$1),makeLeafStr(IDENTIFICATEUR,$3),$5); }
              | envoiMessage '.' ID'('ListOptArg ')'  	 	{ $$=makeTree(ENVOIMESSAGE, 3,$1,makeLeafStr(IDENTIFICATEUR,$3->S),$5); }
              | selection '.' ID '(' ListOptArg ')' 	 	{ $$=makeTree(ENVOIMESSAGE, 3,$1,makeLeafStr(IDENTIFICATEUR,$3->S),$5); }
              | '('instanciation ')' '.' ID '('ListOptArg ')'   { $$=makeTree(ENVOIMESSAGE, 3,$2,makeLeafStr(IDENTIFICATEUR,$5->S),$7); }
             ;

//==================


