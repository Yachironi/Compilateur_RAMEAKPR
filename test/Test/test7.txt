class Point(xc: Integer, yc: Integer)
      { x := xc; y := yc; cpt := cpt+1;} /* Corps du constructeur */
is 
{
  var static cpt : Integer := 1; /* initialisee au lancement du programme */
  var x: Integer;
  var y: Integer;
  var name: String := "x" & cpt.toString();

  def setName(s: String) returns Void { name := s; } /* bloc procedural */

  def move(dx: Integer, dy: Integer) returns Point { /* bloc fonctionnel */
      x := x + dx; y := y + dy; yield this
  }

  def gety() returns Integer := this.y    /* avec this explicite */ 

  def getx() returns Integer := x         /* avec this implicite */  

  def getxBis() returns Integer { yield x }  /* autre forme */  

  /* troisieme forme, incorrecte du point de vue des types puisqu'il
   * y a un "yield void" implicite.
   */  
  def getxTer() returns Integer { return x; }

  def nothing() returns Void { }

  def nothingBis() returns Void { return void; }

  def nothingTer() returns Void { yield void }

  def print() returns Void {
      /* Exemples avec l'operateur & de concatenation de chaines */
      ( "[" & name & "]" ).print();
      ( "= (" & x.toString() & ", " & y.toString() & ")" ).println();
  }

  def verboseMove (dx: Integer, dy: Integer) returns Void {
      this.move(dx, dy);       /* le this est obligatoire */
      this.print();
  }

  def clone() returns Point {
      var res : Point := new Point(x, y);
      is
      res.setName(this.name & "-bis");
      yield res
  }

  /* utilise un bloc fonctionnel */
  def egal(p: Point) returns Integer { 
   /* ils sont egaux s'ils ont memes coordonnees */
       var b1 : Integer := p.x - x;
       var b2 : Integer := p.y - y;
    is if b1 then return 0; else return b2 = 0;
       yield -1 /* necessaire meme si inaccessible ! */
  }

  def egal2(p: Point) returns Integer {
       var b1 : Integer := p.x - x;
       var b2: Integer := 5;
       var result : Integer;
    is if b1 then result := 0;
       else {var b2: Integer := p.y - y; /* masquage du b2 externe ! */
             is result := b2 = 0;
            }
       yield result
  }
}

class Couleur(cinit: Integer) extends Couleur23(cinit) 
  { if cinit = 1 then coul := 1; 
    else if cinit = 0 then coul := 0; else { coul := 2; }
  }
is {
  var coul: Integer;  /* initialise dans le constructeur */

  def static blanc() returns Couleur := new Couleur(0)

  def static noir() returns Couleur := new Couleur(1)

  def static gris() returns Couleur := new Couleur(2)

  def name() returns String {
      var dummy : String;
      is
      if coul = 0 then return "Blanc";
      else {  
             if coul = 1 then dummy := "Noir"; else dummy := "Gris";
           }
     yield dummy
  }

  /* Pas de Booleen, on utilise Integer */
  def estGris() returns Integer := coul = 2

}

class Couleur23(tmp: Integer) extends Couleur(tmp) 
is {
 
}

/* Pas de cycle d'heritage possible */  






{
  
}