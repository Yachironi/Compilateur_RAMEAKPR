/* Exemple de programme dans le langage source.
 * Attention: pour l'instant seuls les aspects lexicaux et
 * syntaxiques ont ete verifies automatiquement.
 */
class Point(xc: Integer, yc: Integer)
{ x := xc; y := yc; cpt := cpt+1;}  /* Corps du constructeur */
is 
{
  var static cpt : Integer := 1; /* initialisee au lancement du programme */
  var x: Integer;
  var y: Integer;
  var name: String := "x" & cpt.toString();


  def move(dx: Integer, dy: Integer) returns Point { /* bloc fonctionnel */
      x := x + dx; y := y + dy; yield this
  }

  def gety(i: Integer, j: Integer, e: Integer) returns Integer := this.y    /* avec this explicite */ 
  def gety() returns Integer := this.y    /* avec this explicite */
  def getx() returns Integer := x         /* avec this implicite */  

  def print() returns Void {
    x.couleur().j().println();            /* devrait renvoyer une erreur */
  }
}
class Couleur(cinit: Integer) 
   /* 3 couleurs : couleur = 0, noir = 1, gris (ou autre chose !) = 2  */
  { if cinit = 1 then coul := 1; 
    else if cinit = 0 then coul := 0; else { coul := 2; }
  }
is {
  var coul: Integer;   /* initialise dans le constructeur */

  def static blanc() returns Couleur := new Couleur(0)

  def static noir() returns Couleur := new Couleur(1)

  def static gris() returns Couleur := new Couleur(2)

  def name() returns String {
      var dummy : String;
      is
      if coul = 0 then return "Blanc";
      else {  
             if coul = 1 then dummy := "Noir"; else dummy := "Gris";
           }
     yield dummy
  }

  /* Pas de Booleen, on utilise Integer */
  def estGris() returns Integer := coul = 2

}
class PointColore(xc: Integer, yc:Integer, c: Couleur)
      extends Point(xc, yc) { coul := c; } is
{  
  var coul: Couleur;

  def couleur() returns Couleur := coul 

  def colore() returns Integer := coul.estGris() <> 0 

  def setCouleur(c: Couleur) returns Void { coul := c; }

  def estGris() returns Integer {
      /* une trace pour verifier qu'on appelle bien la bonne */
      "Inside PointColore::estGris".println();
      yield coul.estGris()
  }

   def override print() returns Void {
      "Inside PointColore::print".println();
      super.print();
      this.couleur().name().println();
  }
}

{ /* Bloc qui correspond au programme principal */ 
  var p1: Point := new Point(1, 5);
  var p2: Point := new Point(2, 3);
  var o : PointColore := new PointColore(0, 0, new Couleur(0));
  var coul1 : Couleur := new Couleur(1);
is
  p2.move(p1.x,p2.y);
  p1.getx();
  1+2;
  p1 := p2;
  p1 := o;
  Couleur.blanc();
  /*p1.gety(1*4+3+4+2+0,p2.getx(),p2.gety(1,1,p1.getx()));*/
}